<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MVIEW1_TOKHAIMD" xml:space="preserve">
    <value />
  </data>
  <data name="MVIEW1_TOKHAIMD2" xml:space="preserve">
    <value>SELECT 
  N1.N501A_SIKNO AS SIKNO ,
  N1.N501A_SINKD AS SINKD,
  N1.N501A_SINKS AS SINKS,
  N1.N501A_SHIKS AS SHIKS,
  N1.N501A_YUNYC AS YUNYC,
  N1.N501A_SINKS AS SINKS ,
  N1.N501A_ENDAY2 AS ENDAY2,
  N1.N501A_YUSYK AS YUSYK,
  N1.N501A_YUNN2 AS YUNN2
FROM N501A N1 
WHERE {0}
UNION 
SELECT 
  N2.N502A_SIKNO AS SIKNO ,
  N2.N502A_SINKD AS SINKD,
  N2.N502A_SINKS AS SINKS,
  N2.N502A_SHIKS AS SHIKS,
  N2.N502A_YUNYC AS YUNYC,
  N2.N502A_SINKS AS SINKS ,
  N2.N502A_ENDAY2 AS ENDAY2,
  N2.N502A_YUSYK AS YUSYK,
  N2.N502A_YUNN2 AS YUNN2
FROM N502A N2 
WHERE {1};

SELECT 
H.SIKNO,
H.RANNB ,
HINME,HINMC,
ORGLC,
TANI1,
SURY1,
TANKA,
KAZTK,
BPRIC,
KANKG,
KAZEI,
KANRT,
NAIBC_1,
NAIRT_1,
NAIGK_1,
NAIBC_2,
NAIRT_2,
NAIGK_2,
NAIBC_3,
NAIRT_3,
NAIGK_3,
NAIBC_4,
NAIRT_4,
NAIGK_4,
NAIBC_5,
NAIRT_5,
NAIGK_5,
ORGNK,
ATCD 

FROM 
(
  SELECT 
  N1.N501A_SIKNO AS SIKNO  
  FROM N501A N1 WHERE {0}
  UNION 
  SELECT 
  N2.N502A_SIKNO AS SIKNO 
  FROM N502A N2 WHERE {1}
) V1 JOIN 
(
SELECT 
	B1.N501B_SIKNO AS SIKNO, 
	B1.N501B_RANNB AS RANNB,
	B1.N501B_HINME AS HINME,
	B1.N501B_HINMC AS HINMC,
	B1.N501B_ORGLC AS ORGLC,
	B1.N501B_TANI1	AS	TANI1	,
	B1.N501B_SURY1	AS	SURY1	,
	B1.N501B_TANKA	AS	TANKA	,
	B1.N501B_KAZTK	AS	KAZTK	,
	B1.N501B_BPRIC	AS	BPRIC	,
	B1.N501B_KANKG	AS	KANKG	,
	B1.N501B_KAZEI	AS	KAZEI	,
	B1.N501B_KANRT	AS	KANRT	,
	B1.N501B_NAIBC_1	AS	NAIBC_1	,
	B1.N501B_NAIRT_1	AS	NAIRT_1	,
	B1.N501B_NAIGK_1	AS	NAIGK_1	,
	B1.N501B_NAIBC_2	AS	NAIBC_2	,
	B1.N501B_NAIRT_2	AS	NAIRT_2	,
	B1.N501B_NAIGK_2	AS	NAIGK_2	,
	B1.N501B_NAIBC_3	AS	NAIBC_3	,
	B1.N501B_NAIRT_3	AS	NAIRT_3	,
	B1.N501B_NAIGK_3	AS	NAIGK_3	,
	B1.N501B_NAIBC_4	AS	NAIBC_4	,
	B1.N501B_NAIRT_4	AS	NAIRT_4	,
	B1.N501B_NAIGK_4	AS	NAIGK_4	,
	B1.N501B_NAIBC_5	AS	NAIBC_5	,
	B1.N501B_NAIRT_5	AS	NAIRT_5	,
	B1.N501B_NAIGK_5	AS	NAIGK_5	,
	B1.N501B_ORGNK	AS	ORGNK	,
	B1.N501B_MATCD 	AS	ATCD 
  FROM  N501B B1 
  UNION
  SELECT 
	B2.N502B_SIKNO AS SIKNO,
	B2.N502B_RANNB AS RANNB,
	B2.N502B_HINME AS HINME,
	B2.N502B_HINMC AS HINMC,
	NULL AS ORGLC ,
	B2.N502B_TANI1	AS	TANI1	,
	B2.N502B_SURY1	AS	SURY1	,
	B2.N502B_TANKA	AS	TANKA	,
	B2.N502B_KAZTK	AS	KAZTK	,
	B2.N502B_BPRIC	AS	BPRIC	,
	B2.N502B_KANKG	AS	KANKG	,
	B2.N502B_KAZEI	AS	KAZEI	,
	B2.N502B_KANRT	AS	KANRT	,
	NULL	AS	NAIBC_1	,
	NULL	AS	NAIRT_1	,
	NULL	AS	NAIGK_1	,
	NULL	AS	NAIBC_2	,
	NULL	AS	NAIRT_2	,
	NULL	AS	NAIGK_2	,
	NULL	AS	NAIBC_3	,
	NULL	AS	NAIRT_3	,
	NULL	AS	NAIGK_3	,
	NULL	AS	NAIBC_4	,
	NULL	AS	NAIRT_4	,
	NULL	AS	NAIGK_4	,
	NULL	AS	NAIBC_5	,
	NULL	AS	NAIRT_5	,
	NULL	AS	NAIGK_5	,
	NULL				AS	ORGNK	,
	B2.N502B_MATCD 	AS	ATCD 
  FROM N502B B2
) H
ON V1.SIKNO=H.SIKNO;</value>
  </data>
  <data name="String1" xml:space="preserve">
    <value>abc</value>
  </data>
</root>